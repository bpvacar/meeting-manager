x-employee-common: &employee-common
  image: benjamin6942/meeting-manager-employee:latest
  depends_on:
    - central
    - db
    - redis
  environment:
    SPRING_DATASOURCE_URL:      jdbc:postgresql://db:5432/meetings
    SPRING_DATASOURCE_USERNAME: admin
    SPRING_DATASOURCE_PASSWORD: secret
    CENTRAL_WS_URL:             ws://central:8080/ws

services:
  # Central service, pulled from your Docker Hub repo
  central:
    image: benjamin6942/meeting-manager-central:latest
    ports:
      - "8080:8080"
    depends_on:
      - db
      - redis
    environment:
      SPRING_DATASOURCE_URL:      jdbc:postgresql://db:5432/meetings
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: secret
      REDIS_HOST:                redis

  # Five identical employee containers, each on its own port
  employee1:
    <<: *employee-common
    ports:
      - "8081:8081"
    environment:
      - PORT=8081

  employee2:
    <<: *employee-common
    ports:
      - "8082:8082"
    environment:
      - PORT=8082

  employee3:
    <<: *employee-common
    ports:
      - "8083:8083"
    environment:
      - PORT=8083

  employee4:
    <<: *employee-common
    ports:
      - "8084:8084"
    environment:
      - PORT=8084

  employee5:
    <<: *employee-common
    ports:
      - "8085:8085"
    environment:
      - PORT=8085

  # Postgres database
  db:
    image: postgres:15
    environment:
      POSTGRES_DB:       meetings
      POSTGRES_USER:     admin
      POSTGRES_PASSWORD: secret
    volumes:
      - db_data:/var/lib/postgresql/data

  # Redis for pub/sub (if still used by your stack)
  redis:
    image: redis:7
    command:
      - redis-server
      - "--save"
      - "60"
      - "1"

  # Frontend service
  frontend:
    image: benjamin6942/meeting-manager-frontend:latest
    ports:
      - "3000:3000"
    depends_on:
      - central

volumes:
  db_data:
